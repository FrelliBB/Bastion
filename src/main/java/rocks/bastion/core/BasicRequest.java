package rocks.bastion.core;

import org.apache.http.entity.ContentType;
import rocks.bastion.core.json.InvalidJsonException;

import java.util.Collection;
import java.util.LinkedList;
import java.util.Objects;

/**
 * @author <a href="mailto:mail@kylepullicino.com">Kyle</a>
 */
public class BasicRequest implements Request {

    private String name;
    private String url;
    private HttpMethod method;
    private ContentType contentType;
    private Collection<ApiHeader> headers;
    private Collection<ApiQueryParam> queryParams;
    private String body;

    private BasicRequest(HttpMethod method, String url, String body) throws InvalidJsonException {
        Objects.requireNonNull(method);
        Objects.requireNonNull(url);

        this.method = method;
        this.url = url;
        this.name = method.getValue() + " " + url;
        this.contentType = ContentType.TEXT_PLAIN;
        this.headers = new LinkedList<>();
        this.queryParams = new LinkedList<>();
        this.body = body;
    }

    /**
     * Construct an HTTP request, using the GET method, to be sent on the specified URL. It will also have
     * a descriptive name which is generated by combining the HTTP method with the URL. Use the {@link BasicRequest#addQueryParam(String, String)}
     * to add query parameters to the request.
     *
     * @param url A non-{@literal null} URL to send the request on
     * @return An HTTP request using the get method
     */
    public static BasicRequest get(String url) {
        return new BasicRequest(HttpMethod.GET, url, null);
    }

    /**
     * Construct an HTTP request, using the POST method, to be sent on the specified URL and with the specified content body.
     * The request will initially be sent with a content-type of "text/plain". It will also have a descriptive name which
     * is generated by combining the HTTP method with the URL. If you would like to send some other representation of content
     * body then we suggest using some other implementation of {@link Request}.
     *
     * @param url A non-{@literal null} URL to send the request on
     * @return An HTTP request using the get method
     */
    public static BasicRequest post(String url, String body) {
        return new BasicRequest(HttpMethod.POST, url, body);
    }

    /**
     * Construct an HTTP request, using the DELETE method, to be sent on the specified URL and with the specified content body.
     * The request will initially be sent with a content-type of "text/plain". It will also have a descriptive name which
     * is generated by combining the HTTP method with the URL. If you would like to send some other representation of content
     * body then we suggest using some other implementation of {@link Request}.
     *
     * @param url A non-{@literal null} URL to send the request on
     * @return An HTTP request using the get method
     */
    public static BasicRequest delete(String url, String body) {
        return new BasicRequest(HttpMethod.DELETE, url, body);
    }

    /**
     * Construct an HTTP request, using the PUT method, to be sent on the specified URL and with the specified content body.
     * The request will initially be sent with a content-type of "text/plain". It will also have a descriptive name which
     * is generated by combining the HTTP method with the URL. If you would like to send some other representation of content
     * body then we suggest using some other implementation of {@link Request}.
     *
     * @param url A non-{@literal null} URL to send the request on
     * @return An HTTP request using the get method
     */
    public static BasicRequest put(String url, String body) {
        return new BasicRequest(HttpMethod.PUT, url, body);
    }

    /**
     * Construct an HTTP request, using the PUT method, to be sent on the specified URL and with the specified content body.
     * The request will initially be sent with a content-type of "text/plain". It will also have a descriptive name which
     * is generated by combining the HTTP method with the URL. If you would like to send some other representation of content
     * body then we suggest using some other implementation of {@link Request}.
     *
     * @param url A non-{@literal null} URL to send the request on
     * @return An HTTP request using the get method
     */
    public static BasicRequest patch(String url, String body) {
        return new BasicRequest(HttpMethod.PATCH, url, body);
    }

    /**
     * Set the content-type that will be used for this request.
     *
     * @param contentType A non-{@literal null} content-type to use for this request
     * @return This request (for method chaining)
     */
    public BasicRequest setContentType(ContentType contentType) {
        Objects.requireNonNull(contentType);
        this.contentType = contentType;
        return this;
    }

    /**
     * Add a new HTTP header that will be sent with this request.
     *
     * @param name  A non-{@literal null} name for the new header
     * @param value A non-{@literal null} value for the new header
     * @return This request (for method chaining)
     */
    public BasicRequest addHeader(String name, String value) {
        this.headers.add(new ApiHeader(name, value));
        return this;
    }

    /**
     * Add a new HTTP query parameter that will be sent with this request.
     *
     * @param name  A non-{@literal null} name for the new query parameter
     * @param value A non-{@literal null} value for the new query parameter
     * @return This request (for method chaining)
     */
    public BasicRequest addQueryParam(String name, String value) {
        this.queryParams.add(new ApiQueryParam(name, value));
        return this;
    }

    @Override
    public String name() {
        return name;
    }

    @Override
    public String url() {
        return url;
    }

    @Override
    public HttpMethod method() {
        return method;
    }

    @Override
    public ContentType contentType() {
        return contentType;
    }

    @Override
    public Collection<ApiHeader> headers() {
        return headers;
    }

    @Override
    public Collection<ApiQueryParam> queryParams() {
        return queryParams;
    }

    @Override
    public Object body() {
        return body;
    }
}
